import React, { useEffect, useState } from "react";
import { useLocation, useNavigate, useParams } from "react-router-dom";
import "./Countdown.css";
import Introduction from "../Introduction/Introduction";
import RegisterTeam from "../RegisterTeam/RegisterTeam";
import api from "../../../../config";
import { api_register_time_check } from "../../api/ApiFlowView/ApiFlowView";
const introduction = `üèÜ L√¢u l√¢u kh√¥ng t·∫°o gi·∫£i cho anh em, anh em h·ªèi nhi·ªÅu qu√°. Ti·ªán ƒë√¢y ch√†o m·ª´ng 70 nƒÉm gi·∫£i ph√≥ng th·ªß ƒë√¥, R√πa Billiards xin t·ªï ch·ª©c 1 gi·∫£i nho nh·ªè cho c√°c em h·ªçc sinh nh√©. üéì
  L·ªãch thi ƒë·∫•u s·∫Ω v√†o ng√†y 11-12 t·ª©c th·ª© 6 tu·∫ßn t·ªõi.
  ƒê·ªëi t∆∞·ª£ng tham gia to√†n b·ªô h·ªçc sinh ƒëang h·ªçc t·∫°i tr∆∞·ªùng THPT Nam Ph√π C·ª´.
  - Gi·∫£i s·∫Ω b·∫Øn 8 b√≥ng bida ƒë√°nh s·ªçc tr∆°n. Game 2 m·∫°ng.
  - ƒê·∫∑c Bi·ªát üÜò ‚ùó kh√¥ng ph·∫£i ƒë√≥ng ph√≠ tham gia ‚ù§Ô∏è.
  Ch·ªâ üèÜ 60k cho 1 tr·∫≠n ƒë·∫•u kh√¥ng t√≠nh th·ªùi gian.
  +1 ü•á Gi·∫£i nh·∫•t s·∫Ω g·ªìm 1 c·ªù, 1 c√∫p, 1 √°o k·ªâ ni·ªám v√† 1 th·∫ª khuy·∫øn m·∫°i 2 th√°ng g·∫≠y thu√™ + 1 th·∫ª 1 ƒë·ªì u·ªëng b·∫•t k√¨ khi ch∆°i t·ª´ 3h tr·ªü l√™n.
  +1 ü•à Gi·∫£i nh√¨ 1 c·ªù + 1 th·∫ª khuy·∫øn m·∫°i 2 th√°ng g·∫≠y thu√™.
  +2 gi·∫£i ba 1 c·ªù + 1 th·∫ª khuy·∫øn m·∫°i 2 th√°ng g·∫≠y thu√™.
  ƒê·∫∑c Bi·ªát t·∫∑ng t·∫•t c·∫£ th√†nh vi√™n tham gia thi ƒë·∫•u m·ªói m·ªôt ng∆∞·ªùi 1 th·∫ª gi·ªù ch∆°i ch·ªâ 29k/1h.
  Th·ªùi gian ƒëƒÉng k√≠ b·∫Øt ƒë·∫ßu t·ª´ ng√†y h√¥m nay ƒë·∫øn h·∫øt ng√†y 10-10.
  V·ªÅ game 2 m·∫°ng th√¨ anh em c√≥ th·ªÉ ƒë·ªçc ·ªü b√†i vi·∫øt sau.
  R√πa Billiards xin c·∫£m ∆°n!
  M·ªçi chi ti·∫øt xin li√™n h·ªá qua sdt 0387598791 (M·∫°nh Qu√¢n) ho·∫∑c nh·∫Øn tin tr·ª±c ti·∫øp qua Facebook Qu√¢n M·∫°nh.`;

const Countdown = () => {
  const navigate = useNavigate();
  const pram = useParams();
  const calculateTimeLeft = () => {
    const difference = new Date(registerConfigApi?.registerTime) - new Date();
    let timeLeft = {};

    if (difference > 0) {
      timeLeft = {
        days: Math.floor(difference / (1000 * 60 * 60 * 24)),
        hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
        minutes: Math.floor((difference / 1000 / 60) % 60),
        seconds: Math.floor((difference / 1000) % 60),
      };
    }
    return timeLeft;
  };

  const [registerConfigApi, setRegisterConfigApi] = useState();
  const [showRegisterTeam, setRegisterTeam] = useState(false);
  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());
  useEffect(() => {
    api
      .get(`${api_register_time_check + pram.competitionId}`)
      .then((response) => {
        if (response.data?.status == "") {
          navigate(`/404error`);
        }
        setRegisterConfigApi(response.data);
      })
      .catch((error) => {
        console.log(error);
      });
  }, []);
  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft(calculateTimeLeft());
    }, 1000);
    return () => clearInterval(timer);
  }, [registerConfigApi]);

  return (
    <div className="countdown_page">
      {showRegisterTeam ? (
        <RegisterTeam />
      ) : (
        <>
          <div className="countdown_container">
            <div className="countdown_title">
              N·ªôi dung thi ƒë·∫•u n√†y cho ph√©p ƒëƒÉng k√Ω tr·ª±c tuy·∫øn ƒë·∫øn h·∫øt ng√†y
              <span className="highlight">
                {new Date(registerConfigApi?.registerTime).toLocaleDateString()}
              </span>
            </div>
            <div className="countdown_timer">
              <div className="time_block">
                <div className="time_value">{timeLeft?.days || 0}</div>
                <div className="time_label">Ng√†y</div>
              </div>
              <div className="time_block">
                <div className="time_value">{timeLeft?.hours || 0}</div>
                <div className="time_label">Gi·ªù</div>
              </div>
              <div className="time_block">
                <div className="time_value">{timeLeft?.minutes || 0}</div>
                <div className="time_label">Ph√∫t</div>
              </div>
              <div className="time_block">
                <div className="time_value">{timeLeft?.seconds || 0}</div>
                <div className="time_label">Gi√¢y</div>
              </div>
            </div>
            <button
              className="register_button"
              onClick={() => setRegisterTeam(true)}
            >
              B·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω
            </button>
          </div>
          <Introduction introduction={introduction} />
        </>
      )}
    </div>
  );
};

export default Countdown;
